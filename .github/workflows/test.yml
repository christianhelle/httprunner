name: Test

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - build
          - test
          - format

jobs:
  test-build:
    name: Test Build Process
    runs-on: ${{ matrix.os }}
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'build' }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: '0.15.1'

    - name: Cache Zig
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/zig
          zig-cache
        key: ${{ runner.os }}-zig-test-${{ hashFiles('build.zig', 'build.zig.zon') }}

    - name: Build debug
      run: zig build

    - name: Build release
      run: zig build -Doptimize=ReleaseFast

    - name: Verify binary exists (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path "zig-out/bin/httprunner.exe") {
          Write-Host "✅ Binary created successfully"
          & "zig-out/bin/httprunner.exe" --help
        } else {
          Write-Error "❌ Binary not found"
          exit 1
        }

    - name: Verify binary exists (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ -f "zig-out/bin/httprunner" ]; then
          echo "✅ Binary created successfully"
          ./zig-out/bin/httprunner --help || true
        else
          echo "❌ Binary not found"
          exit 1
        fi

  test-format:
    name: Test Code Formatting
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'format' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: '0.15.1'

    - name: Check formatting
      run: |
        echo "Checking Zig code formatting..."
        zig fmt --check . || (echo "❌ Code is not properly formatted. Run 'zig fmt .' to fix." && exit 1)
        echo "✅ Code formatting is correct"

  test-unit:
    name: Test Unit Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'test' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: '0.15.1'

    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        zig build test
        echo "✅ All tests passed"

    - name: Test with examples
      run: |
        echo "Testing with example files..."
        zig build
        
        # Test if examples directory exists and contains .http files
        if [ -d "examples" ] && [ "$(ls -A examples/*.http 2>/dev/null)" ]; then
          echo "Found example files:"
          ls -la examples/*.http
          
          # Test with a simple example if it exists
          if [ -f "examples/basic.http" ]; then
            echo "Testing with basic.http..."
            timeout 30s ./zig-out/bin/httprunner examples/basic.http || echo "Test completed (may have failed due to network)"
          fi
        else
          echo "No example files found, skipping integration test"
        fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-build, test-format, test-unit]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test-build.result }}" = "success" ] || [ "${{ needs.test-build.result }}" = "skipped" ]; then
          echo "✅ Build tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-format.result }}" = "success" ] || [ "${{ needs.test-format.result }}" = "skipped" ]; then
          echo "✅ Format tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Format tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-unit.result }}" = "success" ] || [ "${{ needs.test-unit.result }}" = "skipped" ]; then
          echo "✅ Unit tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Pipeline setup is ready for production use! 🚀" >> $GITHUB_STEP_SUMMARY
